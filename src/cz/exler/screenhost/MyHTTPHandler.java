package cz.exler.screenhost;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

/**
 * MyHTTPHandler is simple implementation of HttpHandler
 * for purposes of simple screensharing application.
 * It is responsible for maintaining and controlling
 * content objects:
 * <ul>
 * <li>ChatStorage storage and handler of chat data and operations
 * <li>ScreenShotter provider of screen image data.
 * <li>String representing static web page.
 * </ul>
 * Also handles recieved Http requests. The handling is done
 * based on recieved URI. (see <a href="#getByteResponse">getByteResponse</a>)
 * Provides functionality for counting active connections.
 */
public class MyHTTPHandler implements HttpHandler {
    /**
     * Initiates content objects:
     * <ul>
     * <li>m_siteResponse is initiated from a resource file res/index.html
     * <li>m_screenSource object is created
     * <li>m_chatStorage object is created
     * </ul>
     */
    MyHTTPHandler(){
        try {
            byte[] encoded = Files.readAllBytes(Paths.get("res/index.html"));
            m_siteResponse = new String(encoded, StandardCharsets.UTF_8);
        }
        catch (java.io.IOException e){
            m_siteResponse = "ERROR: " + e.toString();
        }

        m_screenSource = new ScreenShotter();

        m_chatStorage = new ChatStorage();

        m_userHistory = new HashMap<Integer, Long>();
    }

    /**
     * Handles recieved HttpExchange and sends back a reaponse.
     * The response is generated by <a href="#getByteResponse">getByteResponse</a> and is based
     * on the URI path passed in the attribute.
     *
     * @param t HttpExchange object passed in by the HttpServer
     *         that uses this handler.
     * @throws IOException based on possible errors that occurred
     *         during sending/writing the response.
     */
    @Override
    public void handle(HttpExchange t) throws IOException {
        byte[] response = getByteResponse(t.getRequestURI().getPath());
        m_userHistory.put(t.getRemoteAddress().hashCode(),System.currentTimeMillis());
        t.sendResponseHeaders(200, response.length);
        OutputStream os = t.getResponseBody();
        os.write(response);
        os.close();
    }

    /**
     * Count number of clients that connected during the last
     * defined time period.
     *
     * @return number of recently connected clients
     */
    public int getConnectedClientCount(){
        int clientCount = 0;
        long threshold = System.currentTimeMillis() - 3000; // Timeout for counting user inactive is 1,5 s
        for (Map.Entry<Integer, Long> user : m_userHistory.entrySet()) {
            if(user.getValue() < threshold){
                ++clientCount;
            }
        }
        return clientCount;
    }
    // Private
    /**
     * Handles URI passed in requestURI and based on its
     * structure provides requested content. Following
     * format of the URI is expected:
     * /[prefix]/[suffix1]/[suffix2]...
     * The URI is splitted upon "/" and following cases are recognised:
     * <ul>
     * <li>no [suffix] present - Static html page is returned.
     * <li>[suffix1] starts with "screen.jpg" - Screen image data is returned.
     * <li>[suffix1] == "chat" and no other [suffix] is present
     *      - Chat data is returned in JSON format.
     * <li>[suffix1] == "chat" and [suffix2] and [suffix3] are present
     *     - A new record is appended into chat data.
     * <li>All other cases - "ERROR" is returned.
     * </ul>
     *
     * @param requestURI URI to be parsed in string format
     * @return binary data representing response to given URI
     */
    private byte[] getByteResponse(String requestURI){
        String[] splitURI = requestURI.split("/");
        if(splitURI.length < 3){
            return m_siteResponse.getBytes();
        }
        if(splitURI[2].startsWith("screen.jpg")){
            return m_screenSource.getScreen();
        }
        if(splitURI[2].equals("chat")){
            if(splitURI.length == 5) {
                m_chatStorage.addChatRecord(splitURI[3],splitURI[4]);
                return "OK".getBytes();
            }
            else {
                return m_chatStorage.getAsJson().getBytes();
            }
        }
        return "ERROR".getBytes();
    }

    /**
     * Content control and source objects
     */
    private String m_siteResponse = "<html><body>ERROR</body></html>";
    private ScreenShotter m_screenSource = null;
    private ChatStorage m_chatStorage = null;

    /**
     * Map for storing latest client connections.
     * (Used for counting active users)
     */
    private Map<Integer, Long> m_userHistory;

}
